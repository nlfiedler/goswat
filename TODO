GoSwat Checklist (-*- text -*-)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Get the Scheme and Tcl interpreters working well enough to do real work
- Utilize one of the following to facilitate a pseudo GUI in the console
  - https://github.com/nsf/termbox
  - https://github.com/jabb/gocurse
  - http://code.google.com/p/goncurses/
- Evaluate the (now deleted) exp/ogle package
  - Seems to have all of the basics in place
  - Should understand the design and create a new design to address TODO comments
  - See how it uses debug/elf and debug/dwarf
- Evaluate the debug packages (dwarf, elf, etc) for re-use
  - dwarf pkg implements 2.0 standard
  - elf pkg appears up-to-date
  - proc pkg (now deleted?) provides basic debugging support
    - breakpoints
    - processes
    - threads
    - registers
- Features
  - Breakpoint tags vs. groups
  - Built-in functions not overridable
  - Cool swat features (^u^o)
  - Source view area
  - Variables view area
  - Registers view area
  - Compile Scheme/Tcl to bytecode
- From Steve Yegge's "The Pinocchio Problem" essay:
>>>>>
Living software has a command shell, since you need a way to talk to it like a
grown-up. It has an extension language, since you need a way to help it grow.
It has an advice system, since you need a way to train and tailor it. It has a
niche, since it needs users in order to thrive. It has a plug-in architecture,
so you can dress it up for your party. And it is self-aware to the maximum
extent possible given the external performance constraints. These features
must be seamlessly and elegantly integrated, each subsystem implemented with
the same care and attention to detail as the system as a whole.
>>>>>
